{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8204,"sourceType":"datasetVersion","datasetId":4458}],"dockerImageVersionId":31040,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-06-03T04:15:30.665563Z","iopub.execute_input":"2025-06-03T04:15:30.665869Z","iopub.status.idle":"2025-06-03T04:15:30.679827Z","shell.execute_reply.started":"2025-06-03T04:15:30.665846Z","shell.execute_reply":"2025-06-03T04:15:30.679008Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/wine-quality-prediction-ordinal-regression-challe/sample_submission.csv\n/kaggle/input/wine-quality-prediction-ordinal-regression-challe/train.csv\n/kaggle/input/wine-quality-prediction-ordinal-regression-challe/test.csv\n","output_type":"stream"}],"execution_count":24},{"cell_type":"code","source":"cd path/to/data-portfolio-hisu\ngit init\ngit remote add https://github.com/BGlifee/data-portfolio-hisu.git\ngit branch -M main\ngit add .\ngit commit -m \"Intial commit with local files\"\ngit push -u origin main","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-12T20:32:45.367608Z","iopub.execute_input":"2025-06-12T20:32:45.367919Z","iopub.status.idle":"2025-06-12T20:32:45.380126Z","shell.execute_reply.started":"2025-06-12T20:32:45.367890Z","shell.execute_reply":"2025-06-12T20:32:45.378872Z"}},"outputs":[{"traceback":["\u001b[0;36m  File \u001b[0;32m\"/tmp/ipykernel_35/1323718170.py\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    cd path/to/data-portfolio-hisu\u001b[0m\n\u001b[0m       ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"],"ename":"SyntaxError","evalue":"invalid syntax (1323718170.py, line 1)","output_type":"error"}],"execution_count":1},{"cell_type":"code","source":"# Wine Quality Prediction - Cleand & Documented Notebook\n\nimport seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Read data\ntrain_data = pd.read_csv(\"/kaggle/input/wine-quality-prediction-ordinal-regression-challe/train.csv\")\ndf = train_data.copy()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-03T04:15:30.681660Z","iopub.execute_input":"2025-06-03T04:15:30.681982Z","iopub.status.idle":"2025-06-03T04:15:30.712761Z","shell.execute_reply.started":"2025-06-03T04:15:30.681961Z","shell.execute_reply":"2025-06-03T04:15:30.711877Z"}},"outputs":[],"execution_count":25},{"cell_type":"markdown","source":"# *1.Basic EDA*","metadata":{}},{"cell_type":"code","source":"# Quality distribution\nsns.countplot(x='quality', data=df)\nplt.title('Wine Quality Distribution')\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-03T04:15:30.713653Z","iopub.execute_input":"2025-06-03T04:15:30.713882Z","iopub.status.idle":"2025-06-03T04:15:30.882519Z","shell.execute_reply.started":"2025-06-03T04:15:30.713866Z","shell.execute_reply":"2025-06-03T04:15:30.881287Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":26},{"cell_type":"code","source":"# Summary statistics\n\nprint(df.describe())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-03T04:15:30.883605Z","iopub.execute_input":"2025-06-03T04:15:30.883844Z","iopub.status.idle":"2025-06-03T04:15:30.919105Z","shell.execute_reply.started":"2025-06-03T04:15:30.883826Z","shell.execute_reply":"2025-06-03T04:15:30.918191Z"}},"outputs":[{"name":"stdout","text":"                 id  fixed acidity  volatile acidity   citric acid  \\\ncount  15000.000000   15000.000000      15000.000000  15000.000000   \nmean    7499.500000       8.153813          0.505495      0.231547   \nstd     4330.271354       1.398083          0.134842      0.176786   \nmin        0.000000       0.690000          0.120000      0.000000   \n25%     3749.750000       7.200000          0.400000      0.050000   \n50%     7499.500000       7.800000          0.500000      0.240000   \n75%    11249.250000       8.900000          0.600000      0.390000   \nmax    14999.000000      15.900000          1.650000      0.740000   \n\n       residual sugar     chlorides  free sulfur dioxide  \\\ncount    15000.000000  15000.000000         15000.000000   \nmean         2.192122      0.078896            13.253967   \nstd          0.528700      0.015516             7.895505   \nmin          1.080000      0.012000             1.000000   \n25%          1.900000      0.073000             6.000000   \n50%          2.100000      0.078000            12.000000   \n75%          2.400000      0.084000            17.000000   \nmax         15.100000      0.415000            53.000000   \n\n       total sulfur dioxide       density            pH     sulphates  \\\ncount           15000.00000  15000.000000  15000.000000  15000.000000   \nmean               37.32290      0.996915      3.322159      0.620184   \nstd                23.95659      0.001409      0.116639      0.109148   \nmin                 5.00000      0.990640      2.880000      0.390000   \n25%                20.00000      0.995900      3.240000      0.550000   \n50%                31.00000      0.996800      3.320000      0.600000   \n75%                48.00000      0.997800      3.390000      0.660000   \nmax               165.00000      1.003690      3.780000      1.950000   \n\n            alcohol       quality  \ncount  15000.000000  15000.000000  \nmean      10.190577      5.643933  \nstd        0.899417      0.798160  \nmin        8.800000      3.000000  \n25%        9.500000      5.000000  \n50%        9.900000      6.000000  \n75%       10.800000      6.000000  \nmax       14.000000      8.000000  \n","output_type":"stream"}],"execution_count":27},{"cell_type":"code","source":"# Null value check\nprint(df.isnull().sum())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-03T04:15:30.921660Z","iopub.execute_input":"2025-06-03T04:15:30.921930Z","iopub.status.idle":"2025-06-03T04:15:30.928517Z","shell.execute_reply.started":"2025-06-03T04:15:30.921911Z","shell.execute_reply":"2025-06-03T04:15:30.927890Z"}},"outputs":[{"name":"stdout","text":"id                      0\nfixed acidity           0\nvolatile acidity        0\ncitric acid             0\nresidual sugar          0\nchlorides               0\nfree sulfur dioxide     0\ntotal sulfur dioxide    0\ndensity                 0\npH                      0\nsulphates               0\nalcohol                 0\nquality                 0\ndtype: int64\n","output_type":"stream"}],"execution_count":28},{"cell_type":"code","source":"# Standard deviation\nprint(df.std().sort_values(ascending=False))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-03T04:15:30.929220Z","iopub.execute_input":"2025-06-03T04:15:30.929564Z","iopub.status.idle":"2025-06-03T04:15:30.935374Z","shell.execute_reply.started":"2025-06-03T04:15:30.929544Z","shell.execute_reply":"2025-06-03T04:15:30.934728Z"}},"outputs":[{"name":"stdout","text":"id                      4330.271354\ntotal sulfur dioxide      23.956590\nfree sulfur dioxide        7.895505\nfixed acidity              1.398083\nalcohol                    0.899417\nquality                    0.798160\nresidual sugar             0.528700\ncitric acid                0.176786\nvolatile acidity           0.134842\npH                         0.116639\nsulphates                  0.109148\nchlorides                  0.015516\ndensity                    0.001409\ndtype: float64\n","output_type":"stream"}],"execution_count":29},{"cell_type":"code","source":"# Coefficient of variation\n\ncv = df.std() /df.mean()\nprint(cv.sort_values(ascending=False))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-03T04:15:30.936138Z","iopub.execute_input":"2025-06-03T04:15:30.936422Z","iopub.status.idle":"2025-06-03T04:15:30.944613Z","shell.execute_reply.started":"2025-06-03T04:15:30.936402Z","shell.execute_reply":"2025-06-03T04:15:30.943893Z"}},"outputs":[{"name":"stdout","text":"citric acid             0.763500\ntotal sulfur dioxide    0.641874\nfree sulfur dioxide     0.595709\nid                      0.577408\nvolatile acidity        0.266752\nresidual sugar          0.241182\nchlorides               0.196660\nsulphates               0.175993\nfixed acidity           0.171464\nquality                 0.141419\nalcohol                 0.088260\npH                      0.035110\ndensity                 0.001414\ndtype: float64\n","output_type":"stream"}],"execution_count":30},{"cell_type":"markdown","source":"# *2. Outlier Detection & Removal*","metadata":{}},{"cell_type":"code","source":"# Visualizing outliers\nsns.boxplot(data=df['total sulfur dioxide'])\nplt.title(\"Outlier Check: Total Sulfur Dioxide\")\nplt.show()\n\nsns.boxplot(data=df['free sulfur dioxide'])\nplt.title(\"Outlier Check: Free Sulfur Dioxide\")\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-03T04:15:30.945295Z","iopub.execute_input":"2025-06-03T04:15:30.945572Z","iopub.status.idle":"2025-06-03T04:15:31.234659Z","shell.execute_reply.started":"2025-06-03T04:15:30.945554Z","shell.execute_reply":"2025-06-03T04:15:31.233730Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"iVBORw0KGgoAAAANSUhEUgAAAh8AAAGzCAYAAACPa3XZAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8pXeV/AAAACXBIWXMAAA9hAAAPYQGoP6dpAAAvnklEQVR4nO3de1yUZf7/8fcAMoMKo3gAD+ApFcsti9T4eSLDiDU3D62HTmi2ZquuRVnLtoXVFrWWHcy02tLS1LTN9mumZqZ20jzlKQ+5fjVsFTRbAQ+Awf37owfzdQQMhLluGF7Px+N+PJzruue+PzPcOG+u+77ucViWZQkAAMCQALsLAAAAtQvhAwAAGEX4AAAARhE+AACAUYQPAABgFOEDAAAYRfgAAABGET4AAIBRhA8AAGAU4QM12uzZs+VwOHTw4EFPW3x8vOLj422rqSzFtW7atMnofidPniyHw6Eff/zR6H79zcGDB+VwODR79myv9uXLl6tLly5yuVxyOBw6ceKELfWVpay6q5LD4dDkyZN/db3iYxEgfKBKffvtt7rtttvUokULOZ1ONW/eXLfeequ+/fbbSm33qaee0gcffFA1RfrA4sWLlZSUpMaNGys4OFjNmzfX0KFD9emnn9pdmk+MHDlSDoej1GX58uV2lydJOnbsmCZOnKiYmBiFhISoadOm6tatmx566CGdPHmySvZx/PhxDR06VCEhIZo+fbrmzJmjevXqVcm2y3Luex0UFKTw8HDFxsZq4sSJ2rVrl0/3DVSVILsLgP94//33NWLECIWHh2v06NFq06aNDh48qDfeeEPvvfeeFixYoEGDBl3Utp966indfPPNGjhw4K+u+/HHH1/UPi6GZVm68847NXv2bF155ZVKSUlRZGSkjhw5osWLF+u6667Tl19+qf/3//6fsZpMcTqd+sc//lGi/YorrrChGm8//fSTrr76auXk5OjOO+9UTEyMjh8/ru3bt2vGjBm65557VL9+/UrvZ+PGjcrNzdUTTzyhhISEKqi8fPr166c77rhDlmUpOztb27Zt01tvvaVXXnlFzzzzjFJSUjzrtmrVSmfOnFGdOnV8Vs+ZM2cUFMTHCcqPowVVYv/+/br99tvVtm1bffbZZ2rSpImnb+LEierVq5duv/12bd++XW3btvVpLcHBwVW2raKiIhUUFMjlcpXa/9xzz2n27Nm69957NXXqVK8h5Ycfflhz5szx2/+Ug4KCdNttt5V7/VOnTvl8VKDYG2+8oYyMjFKDX05OTpUdI0ePHpUkNWjQoEq2J0l5eXkKDg5WQEDZA9MdOnQo8d4//fTTGjBggO6//37FxMTot7/9raRfRkrKOn6riq+3D//DaRdUiSlTpuj06dN67bXXvIKHJDVu3FivvvqqTp06pb///e+e9pEjR6p169YltnX+eWGHw6FTp07prbfe8gw3jxw5ssxaSrvmIz8/X2lpabrkkkvkdDoVFRWlBx98UPn5+V7rORwOjR8/Xu+8844uu+wyOZ3OMk8jnDlzRunp6YqJidGzzz5b6rns22+/Xd26dStRS0pKipo0aaJ69epp0KBBOnbsWInnLlu2TL169VK9evUUGhqq/v37l3r6as+ePRo6dKiaNGmikJAQdezYUQ8//HCZ748kff/997rkkkvUuXNnZWVlSZJOnz6tPXv2VMm1IcU/w127dumWW25Rw4YN1bNnT0//3LlzFRsbq5CQEIWHh2v48OE6dOhQie18/fXXuuGGG+R2u1W3bl316dNHX3755a/uf//+/QoMDNQ111xToi8sLMzrw7J169alHk+/du1QfHy8kpOTJUldu3b1Oi7Lu801a9bI4XBowYIF+utf/6oWLVqobt26ysnJ+dXXeL5GjRppwYIFCgoK0pNPPulpL+uaj08//dRzfDVo0EA33XSTdu/e7emfNWuWHA6H3nzzTa/nPfXUU3I4HProo488baVd8/HFF1+oa9eucrlcateunV599dUyay/v8QD/4Z9/ksG4JUuWqHXr1urVq1ep/b1791br1q21dOnSCm97zpw5uuuuu9StWzeNGTNGktSuXbtyP7+oqEi/+93v9MUXX2jMmDHq1KmTduzYoeeff17fffddiWtJPv30Uy1cuFDjx49X48aNSw1I0i//uf7000+69957FRgYWO56JkyYoIYNGyotLU0HDx7UCy+8oPHjx+vdd9/1es3JyclKTEzUM888o9OnT2vGjBnq2bOnvvnmG09N27dvV69evVSnTh2NGTNGrVu31v79+7VkyRKvD6Bz7d+/X3379lV4eLhWrlypxo0bS5I2bNiga6+9VmlpaeW6eFBSiaBSp04dud1uz+Pf//73at++vZ566ilZliVJevLJJ/XII49o6NChuuuuu3Ts2DFNmzZNvXv31jfffOMZRfj000+VlJSk2NhYpaWlKSAgQLNmzVLfvn31+eeflwh152rVqpUKCws976MvPPzww+rYsaNee+01Pf7442rTpk2FjstzPfHEEwoODtYDDzyg/Pz8ix6ZiY6OVp8+fbR69Wrl5OQoLCys1PU++eQTJSUlqW3btpo8ebLOnDmjadOmqUePHtqyZYtat26tUaNG6f3331dKSor69eunqKgo7dixQ4899phGjx7tGVkpzY4dO3T99derSZMmmjx5sn7++WelpaUpIiKixLrlPR7gZyygkk6cOGFJsm666aYLrve73/3OkmTl5ORYlmVZycnJVqtWrUqsl5aWZp1/aNarV89KTk4use6sWbMsSdaBAwc8bX369LH69OnjeTxnzhwrICDA+vzzz72eO3PmTEuS9eWXX3raJFkBAQHWt99+e8HXYlmW9eKLL1qSrMWLF//quufWmpCQYBUVFXna77vvPiswMNA6ceKEZVmWlZubazVo0MD6wx/+4PX8zMxMy+12e7X37t3bCg0Ntb7//nuvdc/dfvH7eezYMWv37t1W8+bNra5du1o//fST13NWr15tSbLS0tJ+9bUkJydbkkosxe978T5HjBjh9byDBw9agYGB1pNPPunVvmPHDisoKMjTXlRUZLVv395KTEz0ei2nT5+22rRpY/Xr1++C9WVmZlpNmjSxJFkxMTHW2LFjrXnz5nne43O1atWq1GPr/OPowIEDliRr1qxZnrbin+nGjRsvapvF73nbtm2t06dPX/A1FZNkjRs3rsz+iRMnWpKsbdu2lVl3ly5drKZNm1rHjx/3tG3bts0KCAiw7rjjDk/bkSNHrPDwcKtfv35Wfn6+deWVV1rR0dFWdnZ2iZrOPW4GDhxouVwur+Ny165dVmBgoNfvdnmPB/gfTrug0nJzcyVJoaGhF1yvuP9ihpQrY9GiRerUqZNiYmL0448/epa+fftKklavXu21fp8+fXTppZf+6naLX8evve7zjRkzxusUTa9evVRYWKjvv/9ekrRy5UqdOHFCI0aM8Ko3MDBQ3bt399R77NgxffbZZ7rzzjsVHR3ttY/STgHt3LlTffr0UevWrfXJJ5+oYcOGXv3x8fGyLKvcox4ul0srV670Wp577jmvdcaOHev1+P3331dRUZGGDh3q9doiIyPVvn17z2vbunWr9u3bp1tuuUXHjx/3rHfq1Cldd911+uyzz1RUVFRmbREREdq2bZvGjh2r//73v5o5c6ZuueUWNW3aVE888YRnFKa6SE5OVkhISJVsq/hC2uLfy/MdOXJEW7du1ciRIxUeHu5pv/zyy9WvXz+v0ymRkZGaPn26Vq5cqV69emnr1q168803yxxRkaTCwkKtWLFCAwcO9DouO3XqpMTERK91y3s8wP9w2gWVVvzhW9Z/dsXKG1Kq2r59+7R79+4S16IUK75osFibNm3Ktd3i/4B/7XWf7/ygUBwC/vvf/3rqleQJR2Xt93//938lSZ07dy7XfgcMGKCIiAitWLGiSmZ6BAYG/uoMj/Pfy3379smyLLVv377U9YtnZBS/Bxc6ZZKdnV0iQJ2rWbNmmjFjhl555RXt27dPK1as0DPPPKNHH31UzZo101133XXB2k0q7zFXHsXTiMv6PSsOuR07dizR16lTJ61YscLr4uDhw4dr7ty5Wrp0qcaMGaPrrrvugvs/duyYzpw5U+rPuGPHjl7hprzHA/wP4QOV5na71axZM23fvv2C623fvl0tWrTwfHiWdbOhwsLCKq2vqKhIv/nNbzR16tRS+6Oiorwel/cv0JiYGEm/nN8uzxTgYmVdH1L813jxX/Rz5sxRZGRkifUudvbMkCFD9NZbb+mdd97R3XfffVHbqKjz38uioiI5HA4tW7as1PehOBQVvwdTpkxRly5dSt12eQOUw+FQhw4d1KFDB/Xv31/t27fXO++84wkfFzoOK3Itz/n7rMg2q2rUQ/plhCswMLDKAs3x48c9N8bbtWuXioqKLjgTpyLKezzA/xA+UCVuvPFGvf766/riiy+8ZjUU+/zzz3Xw4EGvD72GDRuWejfI4r/MzlWZuyK2a9dO27Zt03XXXVeld1fs2bOnGjZsqPnz5+svf/nLRX9Qna/4osWmTZtecGSheMryzp07y7XdKVOmKCgoSH/84x8VGhqqW265pfLFVlC7du1kWZbatGmjDh06XHA96ZdRnqq8f0bbtm3VsGFDHTlyxNN2oePwYqeF+2Kb5ZGRkaG1a9cqLi6uzJGPVq1aSZL27t1bom/Pnj1q3Lix15TocePGKTc3V+np6UpNTdULL7zgdR+R8xXPuioevTrX+fss7/EA/8M1H6gSkyZNUkhIiO6++24dP37cq++nn37S2LFjVbduXU2aNMnT3q5dO2VnZ3uNmBTfnOt89erVu+jbVg8dOlT/+c9/9Prrr5foO3PmjE6dOnVR261bt64eeugh7d69Ww899FCp1xHMnTtXGzZsqNB2ExMTFRYWpqeeekpnz54t0V88LbdJkybq3bu33nzzTWVkZHitU1otDodDr732mm6++WYlJyfrf/7nf7z6q3KqbVkGDx6swMBAPfbYYyVqtCzLc+zExsaqXbt2evbZZ0u9G2lpU5PP9fXXX5f6c92wYYOOHz/udcqhXbt2Wr9+vQoKCjxtH374YaWmevpim7/mp59+0ogRI1RYWHjBqdbNmjVTly5d9NZbb3n9Tu3cuVMff/yx1yyW9957T++++66efvpp/fnPf9bw4cP117/+Vd99912Z2w8MDFRiYqI++OADr+Ny9+7dWrFihde65T0e4H8Y+UCVaN++vd566y3deuut+s1vflPiDqc//vij5s+f7zUVcfjw4XrooYc0aNAg/elPf/JMJ+3QoYO2bNnitf3Y2Fh98sknmjp1qpo3b642bdqoe/fu5art9ttv18KFCzV27FitXr1aPXr0UGFhofbs2aOFCxdqxYoVuvrqqy/qdU+aNEnffvutnnvuOa1evVo333yzIiMjlZmZqQ8++EAbNmzQV199VaFthoWFacaMGbr99tt11VVXafjw4WrSpIkyMjK0dOlS9ejRQy+//LIk6aWXXlLPnj111VVXacyYMZ73fOnSpdq6dWuJbQcEBGju3LkaOHCghg4dqo8++shzbcnFTLWtqHbt2ulvf/ubUlNTdfDgQQ0cOFChoaE6cOCAFi9erDFjxuiBBx5QQECA/vGPfygpKUmXXXaZRo0apRYtWug///mPVq9erbCwMC1ZsqTM/cyZM0fvvPOOBg0apNjYWAUHB2v37t1688035XK59Je//MWz7l133aX33ntPN9xwg4YOHar9+/dr7ty5Fz1t1lfbPNd3332nuXPnyrIs5eTkaNu2bVq0aJFOnjypqVOn6oYbbrjg86dMmaKkpCTFxcVp9OjRnqm2brfb87M/evSo7rnnHl177bUaP368JOnll1/W6tWrNXLkSH3xxRdlnn557LHHtHz5cvXq1Ut//OMf9fPPP2vatGm67LLLvP7YKO/xAD9kxxQb+K/t27dbI0aMsJo1a2bVqVPHioyMtEaMGGHt2LGj1PU//vhjq3PnzlZwcLDVsWNHa+7cuaVOtd2zZ4/Vu3dvKyQkxJLkmcZYnqm2lmVZBQUF1jPPPGNddtllltPptBo2bGjFxsZajz32mNe0Qf3KNMayvPfee9b1119vhYeHW0FBQVazZs2sYcOGWWvWrPGsU9a0zOLplqtXry7RnpiYaLndbsvlclnt2rWzRo4caW3atMlrvZ07d1qDBg2yGjRoYLlcLqtjx47WI4884uk/d6ptsdOnT1t9+vSx6tevb61fv96rjvJOta1Xr16Z/aXt81z//Oc/rZ49e1r16tWz6tWrZ8XExFjjxo2z9u7d67XeN998Yw0ePNhq1KiR5XQ6rVatWllDhw61Vq1adcH6tm/fbk2aNMm66qqrvH4mv//9760tW7aUWP+5556zWrRoYTmdTqtHjx7Wpk2bKjXVtrzbLH7PFy1adMHXcy6dM7U5ICDAatCggXXllVdaEydOLHWKeGl1W5ZlffLJJ1aPHj2skJAQKywszBowYIC1a9cuT//gwYOt0NBQ6+DBg17P+9e//mVJsp555hmvms4/btauXWvFxsZawcHBVtu2ba2ZM2eW+rttWeU/HuA/HJZVzeacAQAAv8Y1HwAAwCjCBwAAMIrwAQAAjCJ8AAAAowgfAADAKMIHAAAwqtrdZKyoqEiHDx9WaGhold4KGwAA+I5lWcrNzVXz5s1/9ft/ql34OHz4cIkv+gIAADXDoUOH1LJlywuuU+3CR/GXIR06dMjz7acAAKB6y8nJUVRUVJlfaniuahc+ik+1hIWFET4AAKhhynPJBBecAgAAowgfAADAKMIHAAAwivABAACMInwAAACjCB8AAMAowgcAADCK8AEAAIwifAAw5quvvtKwYcP01Vdf2V0KABsRPgAYkZeXp6lTpyorK0tTp05VXl6e3SUBsAnhA4AR77zzjo4fPy5JOn78uObNm2dzRQDsQvgA4HM//PCD5s2bJ8uyJP3y1dvz5s3TDz/8YHNlAOxA+ADgU5Zl6cUXXyyzvTiQAKg9CB8AfCojI0MbN25UYWGhV3thYaE2btyojIwMmyoDYBfCBwCfio6OVteuXRUYGOjVHhgYqG7duik6OtqmygDYhfABwKccDocmTpxYZrvD4bChKgB2InwA8LmWLVtq6NChXm1Dhw5VixYtbKoIgJ0IHwAAwCjCBwCf++GHH7Rw4UKvtoULFzLVFqilCB8AfIqptgDOR/gA4FNMtQVwPsIHAJ9iqi2A8xE+APhU8ZTa80+vWJbFVFugliJ8APC5li1blho+mGoL1E6EDwA+N3PmzFLDx8yZM22qCICdCB8AfOrs2bNasGBBqX0LFizQ2bNnDVcEwG6EDwA+NW3atEr1A/A/hA8APjVhwoRK9QPwP4QPAD5Vp04dDR8+vNS+W265RXXq1DFcEQC7VSh8TJ48WQ6Hw2uJiYnx9Ofl5WncuHFq1KiR6tevryFDhigrK6vKiwZQs4wdO1ZBQUFebUFBQRozZoxNFQGwU4VHPi677DIdOXLEs3zxxReevvvuu09LlizRokWLtHbtWh0+fFiDBw+u0oIB1EwzZsy44GMAtUfQr69y3hOCghQZGVmiPTs7W2+88YbmzZunvn37SpJmzZqlTp06af369brmmmsqXy2AGqt9+/aKjo5WRkaGoqOj1b59e7tLAmCTCoePffv2qXnz5nK5XIqLi1N6erqio6O1efNmnT17VgkJCZ51Y2JiFB0drXXr1pUZPvLz85Wfn+95nJOTcxEvA0BN8Pbbb9tdAoBqoEKnXbp3767Zs2dr+fLlmjFjhg4cOKBevXopNzdXmZmZCg4OVoMGDbyeExERoczMzDK3mZ6eLrfb7VmioqIu6oUAAICaoUIjH0lJSZ5/X3755erevbtatWqlhQsXKiQk5KIKSE1NVUpKiudxTk4OAQQAAD9Wqam2DRo0UIcOHfTvf/9bkZGRKigo0IkTJ7zWycrKKvUakWJOp1NhYWFeCwAA8F+VCh8nT57U/v371axZM8XGxqpOnTpatWqVp3/v3r3KyMhQXFxcpQsFAAD+oUKnXR544AENGDBArVq10uHDh5WWlqbAwECNGDFCbrdbo0ePVkpKisLDwxUWFqYJEyYoLi6OmS4AAMCjQuHjhx9+0IgRI3T8+HE1adJEPXv21Pr169WkSRNJ0vPPP6+AgAANGTJE+fn5SkxM1CuvvOKTwgEAQM3ksM7/nmub5eTkyO12Kzs7m+s/AACoISry+c13uwAAAKMqfJMxALhY8fHxnn+vWbPGtjoA2IuRDwBG/POf/7zgYwC1B+EDgBHTpk274GMAtQfhA4DPDR8+vELtAPwb4QOATxV/91NpMjMzlZuba7giAHYjfADwqTvuuKNS/QD8D+EDgE+9/fbbleoH4H8IHwB8KjQ0tMwvl2zWrJlCQ0MNVwTAboQPAD63YMGCUtvnz59vuBIA1QHhA4AREyZMuOBjALUH4QOAEUOGDLngYwC1B7dXB2AMt1QHIDHyAQAADCN8ADBm8uTJio+P1+TJk+0uBYCNCB8AjMjKyvKcdlmzZo2ysrLsLQiAbQgfAIwYP36812NmuwC1F+EDgM8tX75cx44d82o7evSoli9fblNFAOxE+ADgU4WFhZoyZUqpfVOmTFFhYaHhigDYjfABwKc+/PDDMgNGYWGhPvzwQ8MVAbAb4QOAT914440KDAwstS8oKEg33nij4YoA2I3wAcCnAgMDNWnSpFL7HnzwwTKDCQD/RfgA4HM33HBDqe3XX3+94UoAVAeEDwA+d6ELTgHUPoQPAD5VUFCgpUuXltq3dOlSFRQUGK4IgN0IHwB8Kj09vVL9APwP4QOAT6WmplaqH4D/IXwA8Kng4GD179+/1L4BAwYoODjYcEUA7Eb4AOBzkyZNksPh8GpzOBy6//77baoIgJ0IHwCMmDZt2gUfA6g9CB8AjOjcubMaN24sSWrcuLE6d+5sc0UA7BJkdwEAao/33nvP7hIAVAOMfAAAAKMIHwCMGT9+vOLj4zV+/Hi7SwFgI8IHACMyMjK0c+dOSdLOnTuVkZFhc0UA7EL4AGDE2LFjL/gYQO1B+ADgc/Pnz9fp06e92k6fPq358+fbVBEAOxE+APjUzz//rFdffbXUvldffVU///yz4YoA2I3wAcCn3n777Ur1A/A/hA8APnXHHXdUqh+A/yF8APCpoKAg3X333aX23XPPPQoK4l6HQG1D+ADgcyNGjCjx7bVOp1PDhg2zqSIAdiJ8ADAiIMD7v5vzv+UWQO1B+ADgc/Pnz1deXp5XW15eHlNtgVqK8AHAp5hqC+B8hA8APsVUWwDnI3wA8Cmm2gI4H+EDgE8x1RbA+QgfAHxuxIgRpbYz1RaonQgfAHwuPj6+Qu0A/BvhA4BP/fDDD5XqB+B/CB8AfOq2226rVD8A/0P4AOBTc+fOrVQ/AP9D+ADgU5GRkZXqB+B/KhU+nn76aTkcDt17772etry8PI0bN06NGjVS/fr1NWTIEGVlZVW2TgA1FDcZA3C+iw4fGzdu1KuvvqrLL7/cq/2+++7TkiVLtGjRIq1du1aHDx/W4MGDK10ogJqJm4wBON9FhY+TJ0/q1ltv1euvv66GDRt62rOzs/XGG29o6tSp6tu3r2JjYzVr1ix99dVXWr9+fanbys/PV05OjtcCwH8UFhZWqh+A/7mo8DFu3Dj1799fCQkJXu2bN2/W2bNnvdpjYmIUHR2tdevWlbqt9PR0ud1uzxIVFXUxJQGoph555JFK9QPwPxUOHwsWLNCWLVuUnp5eoi8zM1PBwcFq0KCBV3tERIQyMzNL3V5qaqqys7M9y6FDhypaEoBq7IknnqhUPwD/U6EvVTh06JAmTpyolStXyuVyVUkBTqdTTqezSrYFoPpxOp2Kj4/XmjVrSvT17duX33+gFqrQyMfmzZt19OhRXXXVVQoKClJQUJDWrl2rl156SUFBQYqIiFBBQYFOnDjh9bysrCym0wG12OTJk0ttf/TRR80WAqBaqNDIx3XXXacdO3Z4tY0aNUoxMTF66KGHFBUVpTp16mjVqlUaMmSIJGnv3r3KyMhQXFxc1VUNAABqrAqFj9DQUHXu3NmrrV69emrUqJGnffTo0UpJSVF4eLjCwsI0YcIExcXF6Zprrqm6qgHUKFOmTCmzfdKkSYarAWC3Kr/D6fPPP68bb7xRQ4YMUe/evRUZGan333+/qncDoIYoKCjQ0qVLS+1bunSpCgoKDFcEwG4Oy7Isu4s4V05Ojtxut7KzsxUWFmZ3OQAq6bHHHtPq1avL7L/22muVlpZmsCIAvlCRz2++2wWAT6WmplaqH4D/IXwA8Kng4GD179+/1L4BAwYoODjYcEUA7Eb4AOBzZV1Uev/99xuuBEB1QPgA4HPx8fEVagfg3wgfAHxq9+7dleoH4H8IHwB86p577qlUPwD/Q/gA4FMzZsyoVD8A/0P4AOBTnTp1qlQ/AP9D+ADgU2fOnKlUPwD/Q/gA4FN/+tOfKtUPwP8QPgD41EsvvVSpfgD+h/ABwKdcLpfq169fal/9+vXlcrkMVwTAboQPAD6VkZGhkydPltp38uRJZWRkGK4IgN0IHwB8Kjo6Wl27di21r1u3boqOjjZcEQC7ET4A+JTD4dDEiRNL7Zs4caIcDofhigDYjfABwOdatmxZanuLFi0MVwKgOiB8APA5vlgOwLkIHwB8atOmTZXqB+B/CB8AfOqBBx6oVD8A/0P4AOBTzz77bKX6AfgfwgcAn7r66qsr1Q/A/xA+APjcmjVrKtQOwL8RPgAAgFGEDwA+x1RbAOcifADwqZ07d1aqH4D/IXwA8Knx48dXqh+A/yF8APCpl19+uVL9APwP4QOAT3Xu3LlS/QD8D+EDgM8x1RbAuQgfAHyO2S4AzkX4AOBTS5curVQ/AP9D+ADgU1OmTKlUPwD/Q/gA4FOTJk2qVD8A/0P4AOBT/fv3r1Q/AP9D+ADgc8x2AXAuwgcAADAqyO4CAF+yLEt5eXl2lwFJH330kX772996Hi9btkxnzpyxsSIUc7lccjgcdpeBWoTwAb+Wl5enpKQku8tAKfi5VB/Lli1TSEiI3WWgFuG0CwAAMIqRD/g1l8ulZcuW2V0G9Mso1KBBgyRJixcvlsvlsrkiFONnAdMIH/BrDoeD4eRqyOVy8XMBajFOuwAAAKMIHwAAwCjCBwAAMIrwAQAAjCJ8AAAAowgfAADAKMIHAAAwivABAACMInwAAACjCB8AAMAowgcAADCK8AEAAIyqUPiYMWOGLr/8coWFhSksLExxcXFe3xial5encePGqVGjRqpfv76GDBmirKysKi8aAADUXBUKHy1bttTTTz+tzZs3a9OmTerbt69uuukmffvtt5Kk++67T0uWLNGiRYu0du1aHT58WIMHD/ZJ4QAAoGZyWJZlVWYD4eHhmjJlim6++WY1adJE8+bN08033yxJ2rNnjzp16qR169bpmmuuKdf2cnJy5Ha7lZ2drbCwsMqUBqAaOXPmjJKSkiRJy5YtU0hIiM0VAahKFfn8vuhrPgoLC7VgwQKdOnVKcXFx2rx5s86ePauEhATPOjExMYqOjta6devK3E5+fr5ycnK8FgAA4L8qHD527Nih+vXry+l0auzYsVq8eLEuvfRSZWZmKjg4WA0aNPBaPyIiQpmZmWVuLz09XW6327NERUVV+EUAAICao8Lho2PHjtq6dau+/vpr3XPPPUpOTtauXbsuuoDU1FRlZ2d7lkOHDl30tgAAQPUXVNEnBAcH65JLLpEkxcbGauPGjXrxxRc1bNgwFRQU6MSJE16jH1lZWYqMjCxze06nU06ns+KVAwCAGqnS9/koKipSfn6+YmNjVadOHa1atcrTt3fvXmVkZCguLq6yuwEAAH6iQiMfqampSkpKUnR0tHJzczVv3jytWbNGK1askNvt1ujRo5WSkqLw8HCFhYVpwoQJiouLK/dMFwAA4P8qFD6OHj2qO+64Q0eOHJHb7dbll1+uFStWqF+/fpKk559/XgEBARoyZIjy8/OVmJioV155xSeFAwCAmqnS9/moatznA/BP3OcD8G9G7vMBAABwMQgfAADAKMIHAAAwivABAACMInwAAACjCB8AAMAowgcAADCK8AEAAIwifAAAAKMIHwAAwCjCBwAAMIrwAQAAjCJ8AAAAowgfAADAKMIHAAAwivABAACMInwAAACjCB8AAMAowgcAADCK8AEAAIwifAAAAKMIHwAAwCjCBwAAMIrwAQAAjCJ8AAAAowgfAADAKMIHAAAwivABAACMInwAAACjCB8AAMAowgcAADCK8AEAAIwifAAAAKMIHwAAwCjCBwAAMIrwAQAAjCJ8AAAAowgfAADAKMIHAAAwivABAACMInwAAACjCB8AAMAowgcAADCK8AEAAIwifAAAAKMIHwAAwCjCBwAAMIrwAQAAjCJ8AAAAowgfAADAKMIHAAAwivABAACMInwAAACjCB8AAMCoCoWP9PR0de3aVaGhoWratKkGDhyovXv3eq2Tl5encePGqVGjRqpfv76GDBmirKysKi0aAADUXBUKH2vXrtW4ceO0fv16rVy5UmfPntX111+vU6dOeda57777tGTJEi1atEhr167V4cOHNXjw4CovHAAA1ExBFVl5+fLlXo9nz56tpk2bavPmzerdu7eys7P1xhtvaN68eerbt68kadasWerUqZPWr1+va665puoqBwAANVKlrvnIzs6WJIWHh0uSNm/erLNnzyohIcGzTkxMjKKjo7Vu3bpSt5Gfn6+cnByvBQAA+K+LDh9FRUW699571aNHD3Xu3FmSlJmZqeDgYDVo0MBr3YiICGVmZpa6nfT0dLndbs8SFRV1sSUBAIAa4KLDx7hx47Rz504tWLCgUgWkpqYqOzvbsxw6dKhS2wMAANVbha75KDZ+/Hh9+OGH+uyzz9SyZUtPe2RkpAoKCnTixAmv0Y+srCxFRkaWui2n0ymn03kxZQAAgBqoQiMflmVp/PjxWrx4sT799FO1adPGqz82NlZ16tTRqlWrPG179+5VRkaG4uLiqqZiAABQo1Vo5GPcuHGaN2+e/vWvfyk0NNRzHYfb7VZISIjcbrdGjx6tlJQUhYeHKywsTBMmTFBcXBwzXQAAgKQKho8ZM2ZIkuLj473aZ82apZEjR0qSnn/+eQUEBGjIkCHKz89XYmKiXnnllSop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\n"},"metadata":{}}],"execution_count":31},{"cell_type":"code","source":"# Removing outliers using IQR\n\nfor col in ['total sulfur dioxide','free sulfur dioxide']:\n    Q1 = df[col].quantile(0.25)\n    Q3 = df[col].quantile(0.75)\n    IQR = Q3 - Q1\n    df = df[(df[col] >= Q1 - 1.5*IQR) & (df[col] <= Q3+1.5*IQR)]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-03T04:15:31.235657Z","iopub.execute_input":"2025-06-03T04:15:31.235903Z","iopub.status.idle":"2025-06-03T04:15:31.247384Z","shell.execute_reply.started":"2025-06-03T04:15:31.235884Z","shell.execute_reply":"2025-06-03T04:15:31.246594Z"}},"outputs":[],"execution_count":32},{"cell_type":"code","source":"# Visualizing after removing outlier\nsns.boxplot(data=df['total sulfur dioxide'])\nplt.title(\"Outlier Check: Total Sulfur Dioxide\")\nplt.show()\n\nsns.boxplot(data=df['free sulfur dioxide'])\nplt.title(\"Outlier Check: Free Sulfur Dioxide\")\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-03T04:15:31.248485Z","iopub.execute_input":"2025-06-03T04:15:31.248776Z","iopub.status.idle":"2025-06-03T04:15:31.493457Z","shell.execute_reply.started":"2025-06-03T04:15:31.248754Z","shell.execute_reply":"2025-06-03T04:15:31.492664Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"iVBORw0KGgoAAAANSUhEUgAAAh8AAAGzCAYAAACPa3XZAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8pXeV/AAAACXBIWXMAAA9hAAAPYQGoP6dpAAApgElEQVR4nO3dd3xUdb7/8feEwEw6PSEaICKXIKj00KMSRWRpCyKILE1wBWEJXgRUmgVEkCrCwlXIIuWKCooKKAhioSisAgrYaBc2ARZTBBIw+f7+8JdZhgRI/U4SX8/HYx6P5JwzJ59JYV6cOSdxGGOMAAAALPHx9gAAAOCPhfgAAABWER8AAMAq4gMAAFhFfAAAAKuIDwAAYBXxAQAArCI+AACAVcQHAACwivhAibR06VI5HA4dOXLEveyOO+7QHXfc4bWZriZr1q+++srqx500aZIcDofOnDlj9ePakPXYvKF///6qWbOmx7Jff/1VDz/8sMLCwuRwODRy5EivzHYtOc1dmPLyNXE4HJo0aVKRzYLij/hAofj222/10EMP6YYbbpDT6VR4eLj69Omjb7/9tkD7nTJlitauXVs4QxaBNWvWqEOHDqpcubLKlSun8PBw9ezZUx9//LG3RytUW7dulcPhyNXtek6ePKlJkybp66+/LvrBJa1bt04xMTGqWrWq/P39ddNNN6lnz57asGFDoX2MKVOmaOnSpXr00Ue1bNky9e3bt9D2nZOsJ/qsm7+/v6pXr65OnTppyZIlSk9PL9KPDxSUr7cHQMn39ttvq3fv3qpYsaIGDRqkyMhIHTlyRK+++qrefPNNrVq1St26dcvXvqdMmaIePXqoa9eu1932ww8/zNfHyA9jjAYOHKilS5eqYcOGGjVqlMLCwvSvf/1La9asUbt27fT555+rZcuW1mYqSnXr1tWyZcs8lo0bN06BgYF66qmn8rSvkydPavLkyapZs6YaNGhQiFNmN2PGDI0ePVoxMTEaN26c/P399eOPP2rTpk1atWqV7r333kL5OB9//LGaN2+uiRMnFsr+cmvBggUKDAxUenq6Tpw4oY0bN2rgwIGaPXu23nvvPUVERLi3Xbx4sTIzM4tslqefflpjx44tsv2jdCE+UCA//fST+vbtq5tuuknbtm1TlSpV3Ov+9re/qU2bNurbt6/27t2rm266qUhnKVeuXKHtKzMzUxcvXpTL5cpx/UsvvaSlS5dq5MiRmjlzpsf/+J966iktW7ZMvr6l58crNDRUDz30kMeyF154QZUrV862vLj47bff9Oyzz+ruu+/OMUxPnTpVaB/r1KlTuuWWWwptf5J0/vx5+fv7X3ObHj16qHLlyu73J0yYoOXLl+svf/mL7r//fu3YscO9rmzZsoU635V8fX1L1fc8ihYvu6BApk+frvPnz2vRokUe4SFJlStX1t///nedO3dOL774onv51V57vvI1Y4fDoXPnzik+Pt59eLl///5XnSWncz7S09M1ceJE3XzzzXI6nYqIiNATTzyR7bC0w+HQY489puXLl6tevXpyOp1XPSx/4cIFTZ06VVFRUZoxY0aOLzX07dtXzZo1yzbLqFGjVKVKFQUEBKhbt246ffp0tvuuX79ebdq0UUBAgIKCgtSxY8ccX746ePCgevbsqSpVqsjPz0916tS57lGIo0eP6uabb1b9+vWVmJgo6fcnuYMHDxbKuSE///yz7r//flWsWFH+/v5q3ry53n//fff6rVu3qmnTppKkAQMGuL+uS5culSR9+umnuv/++1W9enX31ysuLk4XLlzI8yxnzpxRSkqKWrVqleP6qlWrut/O6RyirHkdDoe2bt2a4z6y1h8+fFjvv/+++/EcOXIkT/u84447VL9+fe3evVtt27aVv7+/nnzyyTw/Zknq06ePHn74Ye3cuVMfffSRe3lOP3fnzp3T448/roiICDmdTtWpU0czZsxQ1h87v3DhgqKiohQVFeXxNTh79qyqVaumli1bKiMjQ1LO53ykp6crLi5OVapUUVBQkDp37qz/+7//y3HuEydOaODAgQoNDZXT6VS9evX02muv5etzgOKP+ECBrFu3TjVr1lSbNm1yXN+2bVvVrFnT4wkot5YtWyan06k2bdpo2bJlWrZsmR555JFc3z8zM1OdO3fWjBkz1KlTJ82bN09du3bVrFmz9MADD2Tb/uOPP1ZcXJweeOABzZkz56on53322Wc6e/asHnzwQZUpUybX8wwfPlzffPONJk6cqEcffVTr1q3TY489lu0xd+zYUYGBgZo2bZrGjx+v7777Tq1bt/Z4Etu7d6+io6P18ccfa/DgwZozZ466du2qdevWXfXj//TTT2rbtq2CgoK0detWhYaGSpJ27dqlunXr6uWXX871Y8lJYmKiWrZs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XHP/mZmZ+umnnzyOdlz5PZJ1JUxGRsY1v+9RunDOBwpk9OjR8vPz0yOPPKJ///vfHuvOnj2rv/71r/L399fo0aPdy2vVqqXk5GSPIyZZv5zrSgEBATmGSm707NlTJ06c0OLFi7Otu3Dhgs6dO5ev/fr7+2vMmDE6cOCAxowZ4z5ycbnXX39du3btytN+27dvr+DgYE2ZMkWXLl3Ktj7rstwqVaqobdu2eu2113Ts2DGPbXKaxeFwaNGiRerRo4f69eund99912N9YV1qe99992nXrl3avn27e9m5c+e0aNEi1axZ030+TUBAgKTsT8pZEXf5YzDGaM6cOfma5/z58x6zXC7rfIasJ8Ws8Nu2bZt7m4yMjKu+DJAbRbHP3FixYoX+53/+Ry1atFC7du2uut19992njIyMbFc5zZo1Sw6HQx06dJAkXbp0Sf3791d4eLjmzJmjpUuXKjExUXFxcdecI+v+c+fO9Vh+5dUrZcqUUffu3fXWW2/lGNQ5XY6Oko8jHyiQ2rVrKz4+Xn369NGtt96a7TecnjlzRitXrvR43bdXr14aM2aMunXrphEjRuj8+fNasGCB/uu//ivbiWWNGzfWpk2bNHPmTIWHhysyMjLH8wpy0rdvX73xxhv661//qi1btqhVq1bKyMjQwYMH9cYbb2jjxo1q0qRJvh736NGj9e233+qll17Sli1b1KNHD4WFhSkhIUFr167Vrl279MUXX+Rpn8HBwVqwYIH69u2rRo0aqVevXqpSpYqOHTum999/X61atXI/UcydO1etW7dWo0aNNGTIEPfn/P3338/x15b7+Pjo9ddfV9euXdWzZ0998MEH7nNLdu3apTvvvFMTJ04s0EmnY8eO1cqVK9WhQweNGDFCFStWVHx8vA4fPqy33npLPj6//1+nVq1aKl++vBYuXKigoCAFBAQoOjpaUVFRqlWrlv77v/9bJ06cUHBwsN56661s537k1vnz59WyZUs1b95c9957ryIiIpSUlKS1a9fq008/VdeuXdWwYUNJUr169dS8eXONGzdOZ8+eVcWKFbVq1Sr99ttv+f58FMU+r/Tmm28qMDBQFy9edP+G088//1y33367Vq9efc37durUSXfeeaeeeuopHTlyRLfffrs+/PBDvfPOOxo5cqT7Z/a5557T119/rc2bNysoKEi33XabJkyYoKefflo9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wsK0efNm9/qUlBTt3LlTLVq0KIRxAQBASZenIx+dOnXS888/r+rVq6tevXr65z//qZkzZ2rgwIGSJIfDoZEjR+q5555T7dq1FRkZqfHjxys8PFxdu3YtivkBAEAJk6f4mDdvnsaPH6+hQ4fq1KlTCg8P1yOPPKIJEya4t3niiSd07tw5DRkyRElJSWrdurU2bNggl8tV6MMDAICSx2Eu//WkxUBKSopCQkKUnJys4OBgb48DoJBcuHDBfVn++vXr5efn5+WJABSmvDx/87ddAACAVcQHAACwivgAAABWER8AAMAq4gMAAFhFfAAAAKuIDwAAYBXxAQAArCI+AACAVcQHAACwivgAAABWER8AAMAq4gMAAFhFfAAAAKuIDwAAYBXxAQAArCI+AACAVcQHAACwivgAAABWER8AAMAq4gMAAFhFfAAAAKuIDwAAYBXxAQAArCI+AACAVcQHAACwivgAAABWER8AAMAq4gMAAFhFfAAAAKuIDwAAYBXxAQAArCI+AACAVcQHAACwivgAAABWER8AAMAq4gMAAFhFfAAAAKuIDwAAYBXxAQAArCI+AACAVcQHAACwivgAAABWER8AAMAq4gMAAFhFfAAAAKuIDwAAYBXxAQAArCI+AACAVcQHAACwivgAAABWER8AAMAq4gMAAFhFfAAAAKuIDwAAYBXxAQAArCI+AACAVcQHAACwivgAAABWER8AAMAq4gMAAFhFfAAAAKuIDwAAYBXxAQAArCI+AACAVcQHAACwivgAAABWER8AAMCqPMfHiRMn9NBDD6lSpUry8/PTrbfeqq+++sq93hijCRMmqFq1avLz81NsbKx++OGHQh0aAACUXHmKj19++UWtWrVS2bJltX79en333Xd66aWXVKFCBfc2L774oubOnauFCxdq586dCggIUPv27ZWWllbowwMAgJLHNy8bT5s2TREREVqyZIl7WWRkpPttY4xmz56tp59+Wl26dJEk/eMf/1BoaKjWrl2rXr16FdLYAACgpMrTkY93331XTZo00f3336+qVauqYcOGWrx4sXv94cOHlZCQoNjYWPeykJAQRUdHa/v27TnuMz09XSkpKR43AABQeuUpPn7++WctWLBAtWvX1saNG/Xoo49qxIgRio+PlyQlJCRIkkJDQz3uFxoa6l53palTpyokJMR9i4iIyM/jAAAAJUSe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\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":33},{"cell_type":"markdown","source":"# *3. Feature importance (via Linear Regression)*","metadata":{}},{"cell_type":"code","source":"from sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import cross_val_score","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-03T04:15:31.494515Z","iopub.execute_input":"2025-06-03T04:15:31.494832Z","iopub.status.idle":"2025-06-03T04:15:31.498874Z","shell.execute_reply.started":"2025-06-03T04:15:31.494808Z","shell.execute_reply":"2025-06-03T04:15:31.498211Z"}},"outputs":[],"execution_count":34},{"cell_type":"code","source":"X_full = df.drop(columns=['id','quality'])\ny = df['quality']\n\nX_drop1 = X_full.drop(columns=['total sulfur dioxide'])\nX_drop2 = X_full.drop(columns=['total sulfur dioxide','free sulfur dioxide'])\n\nmodel = make_pipeline(StandardScaler(),LinearRegression())\n\nscore_all = cross_val_score(model,X_full, y, cv=5, scoring='neg_mean_squared_error').mean()\nscore_drop1 = cross_val_score(model, X_drop1, y, cv=5, scoring='neg_mean_squared_error').mean()\nscore_drop2 = cross_val_score(model, X_drop2, y, cv=5, scoring='neg_mean_squared_error').mean()\n\nprint(\"MSE with all features: \", -score_all)\nprint(\"MSE after dropping total sulfur dioxide:\", -score_drop1)\nprint(\"MSE after dropping both sulfur features:\", -score_drop2)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-03T04:15:31.499683Z","iopub.execute_input":"2025-06-03T04:15:31.499930Z","iopub.status.idle":"2025-06-03T04:15:31.764936Z","shell.execute_reply.started":"2025-06-03T04:15:31.499904Z","shell.execute_reply":"2025-06-03T04:15:31.763383Z"}},"outputs":[{"name":"stdout","text":"MSE with all features:  0.5326216159519095\nMSE after dropping total sulfur dioxide: 0.5332086040169087\nMSE after dropping both sulfur features: 0.5331949417848396\n","output_type":"stream"}],"execution_count":35},{"cell_type":"markdown","source":"# *4. Log Transformation & Cross-Validation*","metadata":{}},{"cell_type":"code","source":"y_log = np.log(y)\nX_log = X_full.copy()\n\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import mean_squared_error\n\nkf = KFold(n_splits=5, shuffle=True, random_state=42)\nmse_list = []\n\nfor train_index, test_index in kf.split(X_log):\n    X_train, X_test = X_log.iloc[train_index], X_log.iloc[test_index]\n    y_train, y_test = y_log.iloc[train_index], y_log.iloc[test_index]\n    \n    model.fit(X_train, y_train)\n    y_pred_log = model.predict(X_test)\n    \n    y_pred = np.exp(y_pred_log)\n    y_true = np.exp(y_test) \n    \n    mse = mean_squared_error(y_true, y_pred)\n    mse_list.append(mse)\n\nprint(\"MSE based on inverse-transformed predictions: \", np.mean(mse_list))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-03T04:16:58.951316Z","iopub.execute_input":"2025-06-03T04:16:58.951693Z","iopub.status.idle":"2025-06-03T04:16:59.067771Z","shell.execute_reply.started":"2025-06-03T04:16:58.951669Z","shell.execute_reply":"2025-06-03T04:16:59.066977Z"}},"outputs":[{"name":"stdout","text":"MSE based on inverse-transformed predictions:  0.5353080964063646\n","output_type":"stream"}],"execution_count":40},{"cell_type":"markdown","source":"# *5. Random Forest and XGBoost Comparison*","metadata":{}},{"cell_type":"code","source":"from sklearn.ensemble import RandomForestRegressor\nimport xgboost as xgb\n\nmodels = {\n    'RandomForest': RandomForestRegressor(random_state=42),\n    'XGBoost' : xgb.XGBRegressor(random_stae=42, eval_metric='rsme')\n}\n\nfor name, model in models.items():\n    mse_list = []\n    for train_index, test_index in kf.split(X_log):\n        X_train, X_test = X_log.iloc[train_index], X_log.iloc[test_index]\n        y_train, y_test = y_log.iloc[train_index], y_log.iloc[test_index]\n        \n        model.fit(X_train, y_train)\n        y_pred = np.exp(model.predict(X_test))\n        y_true = np.exp(y_test)\n        \n        mse = mean_squared_error(y_true, y_pred)\n        mse_list.append(mse)\n    \n    print(f\"{name} MSE:\", np.mean(mse_list))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-03T05:00:58.383305Z","iopub.execute_input":"2025-06-03T05:00:58.384082Z","iopub.status.idle":"2025-06-03T05:01:36.744422Z","shell.execute_reply.started":"2025-06-03T05:00:58.384054Z","shell.execute_reply":"2025-06-03T05:01:36.743075Z"}},"outputs":[{"name":"stdout","text":"RandomForest MSE: 0.5453576676792041\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mXGBoostError\u001b[0m                              Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_35/3594386438.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     13\u001b[0m         \u001b[0my_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_test\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0my_log\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0miloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mtrain_index\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_log\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0miloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mtest_index\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 15\u001b[0;31m         \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     16\u001b[0m         \u001b[0my_pred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexp\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m         \u001b[0my_true\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexp\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/xgboost/core.py\u001b[0m in \u001b[0;36minner_f\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    728\u001b[0m             \u001b[0;32mfor\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0marg\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparameters\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    729\u001b[0m                 \u001b[0mkwargs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0marg\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 730\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    731\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    732\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0minner_f\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/xgboost/sklearn.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight, base_margin, eval_set, eval_metric, early_stopping_rounds, verbose, xgb_model, sample_weight_eval_set, base_margin_eval_set, feature_weights, callbacks)\u001b[0m\n\u001b[1;32m   1088\u001b[0m                 \u001b[0mxgb_model\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0meval_metric\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparams\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mearly_stopping_rounds\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcallbacks\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1089\u001b[0m             )\n\u001b[0;32m-> 1090\u001b[0;31m             self._Booster = train(\n\u001b[0m\u001b[1;32m   1091\u001b[0m                 \u001b[0mparams\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1092\u001b[0m                 \u001b[0mtrain_dmatrix\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/xgboost/core.py\u001b[0m in \u001b[0;36minner_f\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    728\u001b[0m             \u001b[0;32mfor\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0marg\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparameters\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    729\u001b[0m                 \u001b[0mkwargs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0marg\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 730\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    731\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    732\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0minner_f\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/xgboost/training.py\u001b[0m in \u001b[0;36mtrain\u001b[0;34m(params, dtrain, num_boost_round, evals, obj, feval, maximize, early_stopping_rounds, evals_result, verbose_eval, xgb_model, callbacks, custom_metric)\u001b[0m\n\u001b[1;32m    179\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mcb_container\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbefore_iteration\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbst\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtrain\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mevals\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    180\u001b[0m             \u001b[0;32mbreak\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 181\u001b[0;31m         \u001b[0mbst\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtrain\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mobj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    182\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mcb_container\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mafter_iteration\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbst\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtrain\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mevals\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    183\u001b[0m             \u001b[0;32mbreak\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/xgboost/core.py\u001b[0m in \u001b[0;36mupdate\u001b[0;34m(self, dtrain, iteration, fobj)\u001b[0m\n\u001b[1;32m   2048\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2049\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mfobj\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2050\u001b[0;31m             _check_call(\n\u001b[0m\u001b[1;32m   2051\u001b[0m                 _LIB.XGBoosterUpdateOneIter(\n\u001b[1;32m   2052\u001b[0m                     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhandle\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mctypes\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mc_int\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miteration\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtrain\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhandle\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/xgboost/core.py\u001b[0m in \u001b[0;36m_check_call\u001b[0;34m(ret)\u001b[0m\n\u001b[1;32m    280\u001b[0m     \"\"\"\n\u001b[1;32m    281\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mret\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 282\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mXGBoostError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpy_str\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_LIB\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mXGBGetLastError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    283\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    284\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mXGBoostError\u001b[0m: [05:01:36] /workspace/src/metric/metric.cc:49: Unknown metric function rsme\nStack trace:\n  [bt] (0) /usr/local/lib/python3.11/dist-packages/xgboost/lib/libxgboost.so(+0x1ba24e) [0x795caee0024e]\n  [bt] (1) /usr/local/lib/python3.11/dist-packages/xgboost/lib/libxgboost.so(+0x4f7e7e) [0x795caf13de7e]\n  [bt] (2) /usr/local/lib/python3.11/dist-packages/xgboost/lib/libxgboost.so(+0x4ccdd3) [0x795caf112dd3]\n  [bt] (3) /usr/local/lib/python3.11/dist-packages/xgboost/lib/libxgboost.so(+0x4c5268) [0x795caf10b268]\n  [bt] (4) /usr/local/lib/python3.11/dist-packages/xgboost/lib/libxgboost.so(XGBoosterUpdateOneIter+0x70) [0x795caeda7ef0]\n  [bt] (5) /lib/x86_64-linux-gnu/libffi.so.8(+0x7e2e) [0x795d23fe7e2e]\n  [bt] (6) /lib/x86_64-linux-gnu/libffi.so.8(+0x4493) [0x795d23fe4493]\n  [bt] (7) /usr/lib/python3.11/lib-dynload/_ctypes.cpython-311-x86_64-linux-gnu.so(+0xa4d8) [0x795d249af4d8]\n  [bt] (8) /usr/lib/python3.11/lib-dynload/_ctypes.cpython-311-x86_64-linux-gnu.so(+0x9c8e) [0x795d249aec8e]\n\n"],"ename":"XGBoostError","evalue":"[05:01:36] /workspace/src/metric/metric.cc:49: Unknown metric function rsme\nStack trace:\n  [bt] (0) /usr/local/lib/python3.11/dist-packages/xgboost/lib/libxgboost.so(+0x1ba24e) [0x795caee0024e]\n  [bt] (1) /usr/local/lib/python3.11/dist-packages/xgboost/lib/libxgboost.so(+0x4f7e7e) [0x795caf13de7e]\n  [bt] (2) /usr/local/lib/python3.11/dist-packages/xgboost/lib/libxgboost.so(+0x4ccdd3) [0x795caf112dd3]\n  [bt] (3) /usr/local/lib/python3.11/dist-packages/xgboost/lib/libxgboost.so(+0x4c5268) [0x795caf10b268]\n  [bt] (4) /usr/local/lib/python3.11/dist-packages/xgboost/lib/libxgboost.so(XGBoosterUpdateOneIter+0x70) [0x795caeda7ef0]\n  [bt] (5) /lib/x86_64-linux-gnu/libffi.so.8(+0x7e2e) [0x795d23fe7e2e]\n  [bt] (6) /lib/x86_64-linux-gnu/libffi.so.8(+0x4493) [0x795d23fe4493]\n  [bt] (7) /usr/lib/python3.11/lib-dynload/_ctypes.cpython-311-x86_64-linux-gnu.so(+0xa4d8) [0x795d249af4d8]\n  [bt] (8) /usr/lib/python3.11/lib-dynload/_ctypes.cpython-311-x86_64-linux-gnu.so(+0x9c8e) [0x795d249aec8e]\n\n","output_type":"error"}],"execution_count":44},{"cell_type":"markdown","source":"# *6. Hyperparameter Tuning*","metadata":{}},{"cell_type":"code","source":"from sklearn.model_selection import GridSearchCV, RandomizedSearchCV\n\n#Random Forest tuning\nparam_grid_rf = {\n    'n_estimators': [100,200],\n    'max_depth': [None, 10, 20],\n    'min_samples_split': [2,5],\n    'min_samples_leaf' : [1,2]\n}\n\nrf = RandomForestRegressor(random_state=42)\ngrid_search = GridSearchCV(rf, param_grid_rf, cv=3, scoring='neg_mean_squared_error', n_jobs=-1)\ngrid_search.fit(X_log, y_log)\nprint(\"Best RF params:\",grid_search.best_params_)\n\n# XGBoost tuning\nparam_dist_xgb = {\n    'n_estimators': [100, 200, 300],\n    'max_depth': [3, 6, 10],\n    'learning_rate': [0.01, 0.1, 0.2],\n    'subsample': [0.7,1],\n    'colsample_bytree': [0.7,1]\n}\n\nxgbr = xgb.XGBRegressor(random_state=42, eval_metric='rmse')\nrandom_search = RandomizedSearchCV(xgbr, param_distributions=param_dist_xgb, n_iter=20,scoring='neg_mean_squared_error',cv=3, random_state=42, n_jobs=-1)\nrandom_search.fit(X_log, y_log)\nprint(\"Best XGB params:\", random_search.best_params_)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-03T05:32:37.697951Z","iopub.execute_input":"2025-06-03T05:32:37.698951Z","iopub.status.idle":"2025-06-03T05:36:17.195836Z","shell.execute_reply.started":"2025-06-03T05:32:37.698917Z","shell.execute_reply":"2025-06-03T05:36:17.195025Z"}},"outputs":[{"name":"stdout","text":"Best RF params: {'max_depth': 10, 'min_samples_leaf': 2, 'min_samples_split': 5, 'n_estimators': 200}\nBest XGB params: {'subsample': 0.7, 'n_estimators': 100, 'max_depth': 3, 'learning_rate': 0.1, 'colsample_bytree': 0.7}\n","output_type":"stream"}],"execution_count":51},{"cell_type":"markdown","source":"# *7. Ensemble: Voting Regrssor*","metadata":{}},{"cell_type":"code","source":"from sklearn.ensemble import VotingRegressor\n\nrf_best = RandomForestRegressor(**grid_search.best_params_, random_state=42)\nxgb_best = xgb.XGBRegressor(**random_search.best_params_, random_state=42, eval_metric='rmse')\n\nvoting_reg = VotingRegressor([('rf', rf_best), ('xgb', xgb_best)])\n\nmse_list = []\nfor train_index, test_index in kf.split(X_log):\n    X_train, X_test = X_log.iloc[train_index], X_log.iloc[test_index]\n    y_train, y_test = y_log.iloc[train_index], y_log.iloc[test_index]\n\n    voting_reg.fit(X_train, y_train)\n    y_pred = np.exp(voting_reg.predict(X_test))\n    y_true = np.exp(y_test)\n\n    mse = mean_squared_error(y_true, y_pred)\n    mse_list.append(mse)\n\nprint(\"Voting Regressor MSE:\", np.mean(mse_list))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-03T05:55:13.202298Z","iopub.execute_input":"2025-06-03T05:55:13.202989Z","iopub.status.idle":"2025-06-03T05:55:50.139187Z","shell.execute_reply.started":"2025-06-03T05:55:13.202961Z","shell.execute_reply":"2025-06-03T05:55:50.137837Z"}},"outputs":[{"name":"stdout","text":"Voting Regressor MSE: 0.5221344844039693\n","output_type":"stream"}],"execution_count":55},{"cell_type":"markdown","source":"# *8. SVM Classification (Scaled & tuned)*","metadata":{}},{"cell_type":"code","source":"# First, make sure df_x and df_y are correct\ndf = train_data.copy()\ndf = df.drop(['id'], axis=1)\n\n# Let's say we want to predict 'quality'\nX = df.drop(['quality'], axis=1)\ny = df['quality']\n\n# Split data\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=10)\n\n# Then scale the data\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nx_train_scaled = scaler.fit_transform(x_train)\nx_test_scaled = scaler.transform(x_test)\n\n# Confirm lengths before SVC\nprint(len(x_train_scaled), len(y_train))  # Should be the same\nprint(len(x_test_scaled), len(y_test))    # Should be the same","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-03T05:55:57.822257Z","iopub.execute_input":"2025-06-03T05:55:57.822620Z","iopub.status.idle":"2025-06-03T05:55:57.843700Z","shell.execute_reply.started":"2025-06-03T05:55:57.822597Z","shell.execute_reply":"2025-06-03T05:55:57.842723Z"}},"outputs":[{"name":"stdout","text":"9000 9000\n6000 6000\n","output_type":"stream"}],"execution_count":56},{"cell_type":"code","source":"from sklearn.svm import SVC\nimport matplotlib.pyplot as plt\n\nscores = []\nC_range = range(1, 31)\n\nfor C_point in C_range:\n    svc = SVC(kernel='rbf', C=C_point, max_iter=1000)\n    model = svc.fit(x_train_scaled, y_train)\n    train_score = model.score(x_train_scaled, y_train)\n    test_score = model.score(x_test_scaled, y_test)\n    print(f\"rbf SVM : C:{C_point}, train set score:{train_score:.2f}, test set score:{test_score:.2f}\")\n    scores.append([train_score, test_score])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-03T05:56:00.761036Z","iopub.execute_input":"2025-06-03T05:56:00.761378Z","iopub.status.idle":"2025-06-03T05:59:45.267227Z","shell.execute_reply.started":"2025-06-03T05:56:00.761355Z","shell.execute_reply":"2025-06-03T05:59:45.266166Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/sklearn/svm/_base.py:299: ConvergenceWarning: Solver terminated early (max_iter=1000).  Consider pre-processing your data with StandardScaler or MinMaxScaler.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"rbf SVM : C:1, train set score:0.45, test set score:0.42\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/sklearn/svm/_base.py:299: ConvergenceWarning: Solver terminated early (max_iter=1000).  Consider pre-processing your data with StandardScaler or MinMaxScaler.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"rbf SVM : C:2, train set score:0.45, test set score:0.42\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/sklearn/svm/_base.py:299: ConvergenceWarning: Solver terminated early (max_iter=1000).  Consider pre-processing your data with StandardScaler or MinMaxScaler.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"rbf SVM : C:3, train set score:0.46, test set score:0.42\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/sklearn/svm/_base.py:299: ConvergenceWarning: Solver terminated early (max_iter=1000).  Consider pre-processing your data with StandardScaler or MinMaxScaler.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"rbf SVM : C:4, train set score:0.46, test set score:0.42\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/sklearn/svm/_base.py:299: ConvergenceWarning: Solver terminated early (max_iter=1000).  Consider pre-processing your data with StandardScaler or MinMaxScaler.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"rbf SVM : C:5, train set score:0.49, test set score:0.44\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/sklearn/svm/_base.py:299: ConvergenceWarning: Solver terminated early (max_iter=1000).  Consider pre-processing your data with StandardScaler or MinMaxScaler.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"rbf SVM : C:6, train set score:0.45, test set score:0.42\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/sklearn/svm/_base.py:299: ConvergenceWarning: Solver terminated early (max_iter=1000).  Consider pre-processing your data with StandardScaler or MinMaxScaler.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"rbf SVM : C:7, train set score:0.43, test set score:0.40\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/sklearn/svm/_base.py:299: ConvergenceWarning: Solver terminated early (max_iter=1000).  Consider pre-processing your data with StandardScaler or MinMaxScaler.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"rbf SVM : C:8, train set score:0.47, test set score:0.44\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/sklearn/svm/_base.py:299: ConvergenceWarning: Solver terminated early (max_iter=1000).  Consider pre-processing your data with StandardScaler or MinMaxScaler.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"rbf SVM : C:9, train set score:0.47, test set score:0.44\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/sklearn/svm/_base.py:299: ConvergenceWarning: Solver terminated early (max_iter=1000).  Consider pre-processing your data with StandardScaler or MinMaxScaler.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"rbf SVM : C:10, train set score:0.46, test set score:0.42\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/sklearn/svm/_base.py:299: ConvergenceWarning: Solver terminated early (max_iter=1000).  Consider pre-processing your data with StandardScaler or MinMaxScaler.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"rbf SVM : C:11, train set score:0.46, test set score:0.42\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/sklearn/svm/_base.py:299: ConvergenceWarning: Solver terminated early (max_iter=1000).  Consider pre-processing your data with StandardScaler or MinMaxScaler.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"rbf SVM : C:12, train set score:0.43, test set score:0.41\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/sklearn/svm/_base.py:299: ConvergenceWarning: Solver terminated early (max_iter=1000).  Consider pre-processing your data with StandardScaler or MinMaxScaler.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"rbf SVM : C:13, train set score:0.43, test set score:0.41\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/sklearn/svm/_base.py:299: ConvergenceWarning: Solver terminated early (max_iter=1000).  Consider pre-processing your data with StandardScaler or MinMaxScaler.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"rbf SVM : C:14, train set score:0.44, test set score:0.41\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/sklearn/svm/_base.py:299: ConvergenceWarning: Solver terminated early (max_iter=1000).  Consider pre-processing your data with StandardScaler or MinMaxScaler.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"rbf SVM : C:15, train set score:0.46, test set score:0.43\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/sklearn/svm/_base.py:299: ConvergenceWarning: Solver terminated early (max_iter=1000).  Consider pre-processing your data with StandardScaler or MinMaxScaler.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"rbf SVM : C:16, train set score:0.42, test set score:0.38\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/sklearn/svm/_base.py:299: ConvergenceWarning: Solver terminated early (max_iter=1000).  Consider pre-processing your data with StandardScaler or MinMaxScaler.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"rbf SVM : C:17, train set score:0.46, test set score:0.41\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/sklearn/svm/_base.py:299: ConvergenceWarning: Solver terminated early (max_iter=1000).  Consider pre-processing your data with StandardScaler or MinMaxScaler.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"rbf SVM : C:18, train set score:0.45, test set score:0.41\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/sklearn/svm/_base.py:299: ConvergenceWarning: Solver terminated early (max_iter=1000).  Consider pre-processing your data with StandardScaler or MinMaxScaler.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"rbf SVM : C:19, train set score:0.44, test set score:0.40\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/sklearn/svm/_base.py:299: ConvergenceWarning: Solver terminated early (max_iter=1000).  Consider pre-processing your data with StandardScaler or MinMaxScaler.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"rbf SVM : C:20, train set score:0.43, test set score:0.39\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/sklearn/svm/_base.py:299: ConvergenceWarning: Solver terminated early (max_iter=1000).  Consider pre-processing your data with StandardScaler or MinMaxScaler.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"rbf SVM : C:21, train set score:0.46, test set score:0.42\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/sklearn/svm/_base.py:299: ConvergenceWarning: Solver terminated early (max_iter=1000).  Consider pre-processing your data with StandardScaler or MinMaxScaler.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"rbf SVM : C:22, train set score:0.44, test set score:0.40\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/sklearn/svm/_base.py:299: ConvergenceWarning: Solver terminated early (max_iter=1000).  Consider pre-processing your data with StandardScaler or MinMaxScaler.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"rbf SVM : C:23, train set score:0.48, test set score:0.43\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/sklearn/svm/_base.py:299: ConvergenceWarning: Solver terminated early (max_iter=1000).  Consider pre-processing your data with StandardScaler or MinMaxScaler.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"rbf SVM : C:24, train set score:0.42, test set score:0.37\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/sklearn/svm/_base.py:299: ConvergenceWarning: Solver terminated early (max_iter=1000).  Consider pre-processing your data with StandardScaler or MinMaxScaler.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"rbf SVM : C:25, train set score:0.47, test set score:0.42\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/sklearn/svm/_base.py:299: ConvergenceWarning: Solver terminated early (max_iter=1000).  Consider pre-processing your data with StandardScaler or MinMaxScaler.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"rbf SVM : C:26, train set score:0.46, test set score:0.39\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/sklearn/svm/_base.py:299: ConvergenceWarning: Solver terminated early (max_iter=1000).  Consider pre-processing your data with StandardScaler or MinMaxScaler.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"rbf SVM : C:27, train set score:0.46, test set score:0.40\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/sklearn/svm/_base.py:299: ConvergenceWarning: Solver terminated early (max_iter=1000).  Consider pre-processing your data with StandardScaler or MinMaxScaler.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"rbf SVM : C:28, train set score:0.43, test set score:0.38\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/sklearn/svm/_base.py:299: ConvergenceWarning: Solver terminated early (max_iter=1000).  Consider pre-processing your data with StandardScaler or MinMaxScaler.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"rbf SVM : C:29, train set score:0.44, test set score:0.39\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/sklearn/svm/_base.py:299: ConvergenceWarning: Solver terminated early (max_iter=1000).  Consider pre-processing your data with StandardScaler or MinMaxScaler.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"rbf SVM : C:30, train set score:0.45, test set score:0.39\n","output_type":"stream"}],"execution_count":57}]}
